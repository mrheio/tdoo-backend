name: Deploy

on:
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    build:
        name: Build image
        runs-on: ubuntu-22.04
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Build Docker image
              run: docker build . --tag tdoo-backend:lts

            - name: Save image
              run: docker save tdoo-backend > /tmp/tdoo-backend.tar

            - name: Upload image
              uses: actions/upload-artifact@v4
              with:
                  name: tdoo-backend
                  path: /tmp/tdoo-backend.tar

    deploy:
        name: Deploy server
        runs-on: ubuntu-22.04
        needs: build
        steps:
            - name: Setup SSH
              run: |
                  mkdir -p ~/.ssh/
                  echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
                  chmod 600 ~/.ssh/id_ed25519
                  ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
                  cat >>~/.ssh/config <<END
                  Host deploy
                    HostName ${{ secrets.SSH_HOST }}
                    User ${{ secrets.SSH_USER }}
                    IdentityFile ~/.ssh/id_ed25519
                  END

            - name: Download image
              uses: actions/download-artifact@v4
              with:
                  name: tdoo-backend
                  path: /tmp

            - name: Upload image to server
              run: rsync -avz /tmp/tdoo-backend.tar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/app/

            - name: Load image
              run: ssh deploy 'cd ~/app && docker load < tdoo-backend.tar'

            - name: Run app
              run: ssh deploy 'docker rm --force tdoo-backend && docker run -d -e DATABASE_URL="${{ secrets.DATABASE_URL }}" -e JWT_SECRET="${{ secrets.JWT_SECRET }}" -p 8080:8080 --name=tdoo-backend tdoo-backend:lts'

            - name: Cleanup
              run: ssh deploy 'docker image prune -a --force'
